global
    log stdout  format raw  local0  info
    maxconn     512000
    user        nobody
    group       root
    daemon
    stats timeout 30s
    ssl-server-verify none

    # https://ssl-config.mozilla.org/#server=haproxy&server-version=1.9&config=intermediate
    # intermediate configuration, tweak to your needs
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam.pem
    ssl-dh-param-file /usr/local/etc/haproxy/dhparam.pem


defaults
    mode                    tcp
    log                     global
    option                  dontlognull
    option                  logasap
    option                  log-separate-errors
    retries                 3
    timeout http-request    10s
    timeout connect         5s
    timeout client          5s #this and timeout server ought to be same
    timeout server          5s
    log-format environment=okay,\ status_code=%ST,\ client_address=%ci:%cp,\ date=[%t],\ front_end=%ft,\ backend_name=%b,\ backend_source_ip=%bi,\ backend_source_port=%bp,\ server=%s,\ client_request_total_time=%Tq,\ queue_waiting_time=%Tw,\ tcp_connection_time=%Tc,\ server_response=%Tr,\ total_response_time=%Tt,\ termination_state=%ts,\ bytes_read=%B,\ captured_request_cookie=%CC,\ captured_response_cookie=%CS,\ termination_state_with_cookie_status=%tsc,\ actconn=%ac,\ frontend_concurrent_connection=%fc,\ beconn=%bc,\ srv_conn=%sc,\ retries=%rc,\ srv_queue=%sq,\ backend_queue=%bq,\ captured_request_headers=%hr,\ captured_response_headers=%hs,\ http_request=%{+Q}r


listen stats
    bind *:1936
    mode http
    stats enable
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth admin:admin

resolvers my_nameresolver
      # AWS name servers & google nameservers for backup
      nameserver dns1 205.251.193.96:53
      nameserver dns2 205.251.194.196:53
      nameserver dns3 205.251.199.158:53
      nameserver dns4 205.251.196.117:53
      nameserver dns5 8.8.8.8:53
      nameserver dns6 8.8.4.4:53

      # see: https://www.mail-archive.com/haproxy@formilux.org/msg24052.html
      # For the next three values, we should use a larger values in real life.
      # We are only using smaller values here for testing; because we want it to fail early if it has to fail
      resolve_retries       3
      timeout retry         1s
      hold valid            1s 


############################ FRONTEND IS HTTP & BACKEND IS HTTP ############################
frontend my_front_end_http_backend_http
    # for this frontend, the following requests will work:
    # 1. curl -vLk http://localhost:9000/health
    bind *:9000
    mode http
    default_backend my_back_end_http

backend my_back_end_http
    mode http
    balance roundrobin
    http-request set-header Host google.com
    server google:80 google.com:80
############################ FRONTEND IS HTTP & BACKEND IS HTTP ############################

############################ FRONTEND IS HTTPS & BACKEND IS HTTP ############################
frontend my_front_end_https_backend_https
    # for this frontend, the following requests will work:
    # 1. curl -vLk https://localhost:9001/health
    bind *:9001 ssl no-sslv3 crt /etc/haproxy/mycert.pem
    mode http
    reqadd X-Forwarded-Proto:\ https
    default_backend my_back_end_http
############################ FRONTEND IS HTTPS & BACKEND IS HTTPS ############################


############################ FRONTEND IS HTTP & BACKEND IS HTTPS ############################
frontend my_front_end_http_with_backend_upgrade_to_https
    # for this frontend, the following requests will work:
    # 1. curl -vILk http://localhost:9002/health
    bind *:9002
    mode http
    # we redirect with 307;  `Moved temporarily but preserve the HTTP method.`
    # we could also use 308; `Moved permanently but preserve the HTTP method.`
    http-request redirect code 307 location https://google.com%[capture.req.uri]
    default_backend backend_upgrade_to_https

backend backend_upgrade_to_https
    mode http
    balance roundrobin
    http-request set-header Host google.com
    server google:443 google.com:443
############################ FRONTEND IS HTTP & BACKEND IS HTTPS ############################




frontend moje
    # for this frontend, the following requests will work:
    # 1. curl -vILk http://localhost:9003/health
    bind *:9003
    mode http
    default_backend moje

backend moje
    mode http
    balance roundrobin
    http-request set-header Host google.com
    server google:443 google.com:443 check resolvers my_nameresolver ssl verify none